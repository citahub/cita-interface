// Code generated by protoc-gen-go.
// source: blockchain.proto
// DO NOT EDIT!

/*
Package blockchain is a generated protocol buffer package.

It is generated from these files:
	blockchain.proto

It has these top-level messages:
	Proof
	BlockHeader
	Status
	AccountGasLimit
	RichStatus
	Transaction
	UnverifiedTransaction
	SignedTransaction
	BlockBody
	Block
	BlockWithProof
	BlockTxs
*/
package blockchain

import proto "github.com/golang/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type ProofType int32

const (
	ProofType_AuthorityRound ProofType = 0
	ProofType_Raft           ProofType = 1
	ProofType_Tendermint     ProofType = 2
)

var ProofType_name = map[int32]string{
	0: "AuthorityRound",
	1: "Raft",
	2: "Tendermint",
}
var ProofType_value = map[string]int32{
	"AuthorityRound": 0,
	"Raft":           1,
	"Tendermint":     2,
}

func (x ProofType) String() string {
	return proto.EnumName(ProofType_name, int32(x))
}

type Crypto int32

const (
	Crypto_SECP Crypto = 0
	Crypto_SM2  Crypto = 1
)

var Crypto_name = map[int32]string{
	0: "SECP",
	1: "SM2",
}
var Crypto_value = map[string]int32{
	"SECP": 0,
	"SM2":  1,
}

func (x Crypto) String() string {
	return proto.EnumName(Crypto_name, int32(x))
}

type Proof struct {
	Content []byte    `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Type    ProofType `protobuf:"varint,2,opt,name=type,enum=ProofType" json:"type,omitempty"`
}

func (m *Proof) Reset()         { *m = Proof{} }
func (m *Proof) String() string { return proto.CompactTextString(m) }
func (*Proof) ProtoMessage()    {}

type BlockHeader struct {
	Prevhash         []byte `protobuf:"bytes,1,opt,name=prevhash,proto3" json:"prevhash,omitempty"`
	Timestamp        uint64 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Height           uint64 `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
	StateRoot        []byte `protobuf:"bytes,4,opt,name=state_root,proto3" json:"state_root,omitempty"`
	TransactionsRoot []byte `protobuf:"bytes,5,opt,name=transactions_root,proto3" json:"transactions_root,omitempty"`
	ReceiptsRoot     []byte `protobuf:"bytes,6,opt,name=receipts_root,proto3" json:"receipts_root,omitempty"`
	GasUsed          uint64 `protobuf:"varint,7,opt,name=gas_used" json:"gas_used,omitempty"`
	GasLimit         uint64 `protobuf:"varint,8,opt,name=gas_limit" json:"gas_limit,omitempty"`
	Proof            *Proof `protobuf:"bytes,9,opt,name=proof" json:"proof,omitempty"`
	Proposer         []byte `protobuf:"bytes,10,opt,name=proposer,proto3" json:"proposer,omitempty"`
}

func (m *BlockHeader) Reset()         { *m = BlockHeader{} }
func (m *BlockHeader) String() string { return proto.CompactTextString(m) }
func (*BlockHeader) ProtoMessage()    {}

func (m *BlockHeader) GetProof() *Proof {
	if m != nil {
		return m.Proof
	}
	return nil
}

type Status struct {
	Hash   []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Height uint64 `protobuf:"varint,2,opt,name=height" json:"height,omitempty"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}

type AccountGasLimit struct {
	CommonGasLimit   uint64            `protobuf:"varint,1,opt,name=common_gas_limit" json:"common_gas_limit,omitempty"`
	SpecificGasLimit map[string]uint64 `protobuf:"bytes,2,rep,name=specific_gas_limit" json:"specific_gas_limit,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *AccountGasLimit) Reset()         { *m = AccountGasLimit{} }
func (m *AccountGasLimit) String() string { return proto.CompactTextString(m) }
func (*AccountGasLimit) ProtoMessage()    {}

func (m *AccountGasLimit) GetSpecificGasLimit() map[string]uint64 {
	if m != nil {
		return m.SpecificGasLimit
	}
	return nil
}

type RichStatus struct {
	Hash     []byte   `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Height   uint64   `protobuf:"varint,2,opt,name=height" json:"height,omitempty"`
	Nodes    [][]byte `protobuf:"bytes,3,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Interval uint64   `protobuf:"varint,4,opt,name=interval" json:"interval,omitempty"`
}

func (m *RichStatus) Reset()         { *m = RichStatus{} }
func (m *RichStatus) String() string { return proto.CompactTextString(m) }
func (*RichStatus) ProtoMessage()    {}

type Transaction struct {
	To              string `protobuf:"bytes,1,opt,name=to" json:"to,omitempty"`
	Nonce           string `protobuf:"bytes,2,opt,name=nonce" json:"nonce,omitempty"`
	Quota           uint64 `protobuf:"varint,3,opt,name=quota" json:"quota,omitempty"`
	ValidUntilBlock uint64 `protobuf:"varint,4,opt,name=valid_until_block" json:"valid_until_block,omitempty"`
	Data            []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	Value           []byte `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
	ChainId         uint32 `protobuf:"varint,7,opt,name=chain_id" json:"chain_id,omitempty"`
	Version         uint32 `protobuf:"varint,8,opt,name=version" json:"version,omitempty"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}

type UnverifiedTransaction struct {
	Transaction *Transaction `protobuf:"bytes,1,opt,name=transaction" json:"transaction,omitempty"`
	Signature   []byte       `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	Crypto      Crypto       `protobuf:"varint,3,opt,name=crypto,enum=Crypto" json:"crypto,omitempty"`
}

func (m *UnverifiedTransaction) Reset()         { *m = UnverifiedTransaction{} }
func (m *UnverifiedTransaction) String() string { return proto.CompactTextString(m) }
func (*UnverifiedTransaction) ProtoMessage()    {}

func (m *UnverifiedTransaction) GetTransaction() *Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

type SignedTransaction struct {
	TransactionWithSig *UnverifiedTransaction `protobuf:"bytes,1,opt,name=transaction_with_sig" json:"transaction_with_sig,omitempty"`
	TxHash             []byte                 `protobuf:"bytes,2,opt,name=tx_hash,proto3" json:"tx_hash,omitempty"`
	Signer             []byte                 `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *SignedTransaction) Reset()         { *m = SignedTransaction{} }
func (m *SignedTransaction) String() string { return proto.CompactTextString(m) }
func (*SignedTransaction) ProtoMessage()    {}

func (m *SignedTransaction) GetTransactionWithSig() *UnverifiedTransaction {
	if m != nil {
		return m.TransactionWithSig
	}
	return nil
}

// data precompile API
type BlockBody struct {
	Transactions []*SignedTransaction `protobuf:"bytes,1,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *BlockBody) Reset()         { *m = BlockBody{} }
func (m *BlockBody) String() string { return proto.CompactTextString(m) }
func (*BlockBody) ProtoMessage()    {}

func (m *BlockBody) GetTransactions() []*SignedTransaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type Block struct {
	Version uint32       `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Header  *BlockHeader `protobuf:"bytes,2,opt,name=header" json:"header,omitempty"`
	Body    *BlockBody   `protobuf:"bytes,3,opt,name=body" json:"body,omitempty"`
}

func (m *Block) Reset()         { *m = Block{} }
func (m *Block) String() string { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()    {}

func (m *Block) GetHeader() *BlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Block) GetBody() *BlockBody {
	if m != nil {
		return m.Body
	}
	return nil
}

type BlockWithProof struct {
	Blk   *Block `protobuf:"bytes,1,opt,name=blk" json:"blk,omitempty"`
	Proof *Proof `protobuf:"bytes,2,opt,name=proof" json:"proof,omitempty"`
}

func (m *BlockWithProof) Reset()         { *m = BlockWithProof{} }
func (m *BlockWithProof) String() string { return proto.CompactTextString(m) }
func (*BlockWithProof) ProtoMessage()    {}

func (m *BlockWithProof) GetBlk() *Block {
	if m != nil {
		return m.Blk
	}
	return nil
}

func (m *BlockWithProof) GetProof() *Proof {
	if m != nil {
		return m.Proof
	}
	return nil
}

type BlockTxs struct {
	Height uint64     `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	Body   *BlockBody `protobuf:"bytes,3,opt,name=body" json:"body,omitempty"`
}

func (m *BlockTxs) Reset()         { *m = BlockTxs{} }
func (m *BlockTxs) String() string { return proto.CompactTextString(m) }
func (*BlockTxs) ProtoMessage()    {}

func (m *BlockTxs) GetBody() *BlockBody {
	if m != nil {
		return m.Body
	}
	return nil
}

func init() {
	proto.RegisterEnum("ProofType", ProofType_name, ProofType_value)
	proto.RegisterEnum("Crypto", Crypto_name, Crypto_value)
}
